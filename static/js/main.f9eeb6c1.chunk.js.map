{"version":3,"sources":["components/AppMenu/AppMenu.tsx","components/Card/CoronaCard.tsx","routing.tsx","components/FirstContent/FirstContent.tsx","components/FirstContent/hook.tsx","components/SecondContent/SecondContent.tsx","components/ThirdContent/ThirdContent.tsx","components/AppContent/AppContent.tsx","components/SideNav/SideNav.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenu","className","theme","mode","defaultSelectedKeys","Item","key","to","UserOutlined","VideoCameraOutlined","UploadOutlined","CoronaCard","loading","title","content","style","padding","span","bordered","hoverable","routes","path","exact","component","url","useState","undefined","data","setData","setLoading","useEffect","a","fetch","response","json","getFetchUrl","useFetch","console","log","gutter","confirmed","value","recovered","deaths","Content","Layout","AppContent","margin","minHeight","map","route","index","Header","Sider","SideNav","collapsed","setCollapsed","trigger","collapsible","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","onClick","IndexPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9eeb6c1.chunk.js","sourcesContent":["import React from \"react\";\nimport {Menu} from \"antd\";\nimport {UploadOutlined, UserOutlined, VideoCameraOutlined} from \"@ant-design/icons\";\nimport \"./AppMenu.scss\";\nimport {Link} from \"react-router-dom\";\n\nexport default function AppMenu() {\n    return (\n        <>\n            <div className=\"logo\">COVID-19</div>\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\n                <Menu.Item key=\"1\">\n                    <Link to=\"/\">\n                        <UserOutlined/>\n                        <span>Dashboard - Polska</span>\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"2\">\n                    <Link to=\"/secondContent\">\n                        <VideoCameraOutlined/>\n                        <span>Dashboard - Świat</span>\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item key=\"3\">\n                    <Link to=\"/thirdContent\">\n                        <UploadOutlined/>\n                        <span>Mapa polski i świata</span>\n                    </Link>\n                </Menu.Item>\n            </Menu>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Card, Col } from \"antd\";\nimport \"./CoronaCard.scss\"\n\nexport default function CoronaCard({loading, title, content}: {loading: boolean, title: string, content: any}) {\n  return (\n    <>\n      <Col \n      style={{ padding: 16 }}\n      span={8}>\n        <Card \n        loading={loading}\n        title={title} \n        bordered={false} \n        hoverable\n        >\n          {content}\n        </Card>\n      </Col>\n    </>\n  );\n}\n","\nimport FirstContent from \"./components/FirstContent/FirstContent\";\nimport SecondContent from \"./components/SecondContent/SecondContent\";\nimport ThirdContent from \"./components/ThirdContent/ThirdContent\";\n\n\nexport const routes: any = [\n    {\n      path: \"/\",\n      exact: true,\n      component: FirstContent \n    },\n    {\n      path: \"/secondContent\",\n      component: SecondContent\n    },\n    {\n      path: \"/thirdContent\",\n      component: ThirdContent\n    }\n  ];","import React from \"react\";\nimport CoronaCard from \"../Card/CoronaCard\";\nimport \"./FirstContent.scss\";\nimport {Row} from 'antd';\nimport {useFetch} from \"./hook\";\n\n\nexport default function FirstContent() {\n    const {data, loading} = useFetch('https://covid19.mathdro.id/api/countries/POLAND/');\n\n    console.log(data)\n    return (\n        <div className=\"site-card-wrapper\">\n            <Row gutter={16}>\n\n     <CoronaCard\n        loading={loading}\n        title={\"Obecnie zarażonych\"}\n        content={data?.confirmed.value}\n        />\n           <CoronaCard\n        loading={loading}\n        title={\"Wszystkich wyleczonych\"}\n        content={data?.recovered.value}\n        />\n           <CoronaCard\n      loading={loading}\n        title={\"Zgony\"}\n        content={data?.deaths.value}\n        />\n      </Row>\n    </div>\n  );\n}\n","import {useEffect, useState} from \"react\";\n\ninterface CoronaValue {\n    value: number;\n    detail: string;\n}\n\ninterface CoronaData {\n    confirmed: CoronaValue;\n    recovered: CoronaValue;\n    deaths: CoronaValue;\n}\n\ntype FetchReturn =\n    | { data: CoronaData, loading: false }\n    | { data: undefined, loading: true };\n\nfunction useFetch(url: string) {\n    const [data, setData] = useState<CoronaData | undefined>(undefined);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        async function getFetchUrl() {\n            const response = await fetch(url);\n            const json = await response.json();\n\n            setData(json);\n            setLoading(false);\n        }\n\n        getFetchUrl();\n    }, [url]);\n\n    return {data, loading} as FetchReturn;\n}\n\nexport {useFetch}","import React from 'react'\n\nexport default function SecondContent() {\n    return (\n        <div>\n            Second Content\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function ThirdContent() {\n    return (\n        <div>\n           Third Content \n        </div>\n    )\n}\n","import React from \"react\";\nimport {Layout} from \"antd\";\nimport './AppContent.scss'\nimport {routes} from \"../../routing\";\nimport {Route, Switch} from \"react-router-dom\";\n\nconst {Content} = Layout;\nexport default function AppContent() {\n    return (\n        <>\n            <Content\n                className=\"site-layout-background\"\n                style={{\n                    margin: \"24px 16px\",\n                    padding: 24,\n                    minHeight: \"100vh\"\n                }}\n            >\n                <Switch>\n                    {routes.map((route: any, index: number) => (\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            component={route.component}\n                        />\n                    ))}\n                </Switch>\n            </Content>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\nimport \"./SideNav.scss\";\nimport AppMenu from \"../AppMenu/AppMenu\";\nimport AppContent from \"../AppContent/AppContent\";\n\n\nconst { Header, Sider } = Layout;\n\nexport default function SideNav() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  const trigger = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <>\n      <Sider trigger={null} collapsible collapsed={collapsed}>\n        <AppMenu />\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            {React.createElement(\n              collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\n              {\n                className: \"trigger\",\n                onClick: trigger\n              }\n            )}\n          </Header>\n          <AppContent />\n        </Layout>\n    </>\n  );\n}\n","import React from \"react\";\nimport SideNav from \"../components/SideNav/SideNav\";\nimport {Layout} from \"antd\";\nimport 'antd/dist/antd.css';\n\nexport default function IndexPage() {\n    return (\n        <Layout>\n            <SideNav/>\n        </Layout>\n    );\n}\n","import React from 'react';\nimport './App.scss';\nimport IndexPage from './pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <IndexPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}