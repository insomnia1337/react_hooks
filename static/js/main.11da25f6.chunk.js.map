{"version":3,"sources":["components/AppMenu/AppMenu.tsx","components/Card/CoronaCard.tsx","components/api/useFetch.tsx","components/Chart/Chart.tsx","routing.tsx","components/FirstContent/FirstContent.tsx","components/SecondContent/SecondContent.tsx","components/ThirdContent/ThirdContent.tsx","components/AppContent/AppContent.tsx","components/SideNav/SideNav.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenu","className","theme","mode","defaultSelectedKeys","Item","key","to","UserOutlined","VideoCameraOutlined","UploadOutlined","CoronaCard","loading","title","content","lastUpdate","style","padding","span","bordered","hoverable","start","end","duration","separator","Date","toDateString","useFetch","url","useState","undefined","data","setData","setLoading","useEffect","a","fetch","response","json","getFetchUrl","Chart","modifiedData","React","useMemo","length","map","dailyData","confirmed","total","deaths","date","reportDate","console","log","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","routes","path","exact","component","gutter","value","recovered","Content","Layout","AppContent","margin","minHeight","route","index","Header","Sider","SideNav","collapsed","setCollapsed","trigger","collapsible","createElement","MenuUnfoldOutlined","MenuFoldOutlined","onClick","IndexPage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"keAUe,SAASA,IACtB,OACE,oCACE,yBAAKC,UAAU,QAAf,YACA,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACrD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAACC,EAAA,EAAD,MACA,sDAIJ,kBAAC,IAAKH,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,kBACP,kBAACE,EAAA,EAAD,MACA,0DAIJ,kBAAC,IAAKJ,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAG,iBACP,kBAACG,EAAA,EAAD,MACA,+D,+DC3BG,SAASC,EAAT,GAUX,IATFC,EASC,EATDA,QACAC,EAQC,EARDA,MACAC,EAOC,EAPDA,QACAC,EAMC,EANDA,WAOA,OACE,oCACE,kBAAC,IAAD,CAAKC,MAAO,CAAEC,QAAS,IAAMC,KAAM,GACjC,kBAAC,IAAD,CAAMN,QAASA,EAASC,MAAOA,EAAOM,UAAU,EAAOC,WAAS,GAC9D,4BACE,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKR,EAASS,SAAU,EAAKC,UAAU,OAE5D,6BAAM,IAAIC,KAAKV,GAAYW,mB,8CCrBrC,SAASC,EAAYC,GAAc,IAAD,EACRC,wBAAwBC,GADhB,mBACzBC,EADyB,KACnBC,EADmB,OAEFH,oBAAS,GAFP,mBAEzBjB,EAFyB,KAEhBqB,EAFgB,KAgBhC,OAZAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAMR,GAD/B,cACQS,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAIEN,EAAQM,GACRL,GAAW,GALb,4CADc,uBAAC,WAAD,wBASdM,KACC,CAACX,IAEG,CAAEG,OAAMnB,W,oBCCF,SAAS4B,IAAS,IACvBT,EAASJ,EAAqB,wCAA9BI,KACFU,EAAeC,IAAMC,SAAQ,WACjC,OACEZ,GACAA,EAAKa,QACLb,EAAKc,KAAI,SAACC,GAAD,MAAqB,CAC5BC,UAAWD,EAAUC,UAAUC,MAC/BC,OAAQH,EAAUG,OAAOD,MACzBE,KAAMJ,EAAUK,iBAGnB,CAACpB,IACJqB,QAAQC,IAAIZ,GAEZ,IAAMa,EACJb,GAAgBA,EAAaG,OAC3B,kBAAC,IAAD,CACEb,KAAM,CACJwB,OAAQd,EAAaI,KAAI,qBAAGK,QAC5BM,SAAU,CACR,CACEzB,KAAI,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAcI,KAAI,qBAAGE,aAC3BU,MAAO,eACPC,YAAa,UACbC,MAAM,GAER,CACE5B,KAAI,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAcI,KAAI,qBAAGI,UAC3BQ,MAAO,QACPC,YAAa,MACbE,gBAAiB,oBACjBD,MAAM,OAKZ,KACN,OACE,6BACE,6BAAML,ICvDL,IAAMO,EAAc,CACzB,CACEC,KAAM,IACNC,OAAO,EACPC,UCUW,WAAyB,IAAD,EACXrC,EACxB,oDADMI,EAD6B,EAC7BA,KAAMnB,EADuB,EACvBA,QAId,OACE,yBAAKX,UAAU,qBACb,kBAAC,IAAD,CAAKgE,OAAQ,IACX,kBAAC,EAAD,CACErD,QAASA,EACTC,MAAM,0BACNC,QAAO,OAAEiB,QAAF,IAAEA,OAAF,EAAEA,EAAMgB,UAAUmB,MACzBnD,WAAU,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAMhB,aAEpB,kBAAC,EAAD,CACEH,QAASA,EACTC,MAAM,yBACNC,QAAO,OAAEiB,QAAF,IAAEA,OAAF,EAAEA,EAAMoC,UAAUD,MACzBnD,WAAU,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAMhB,aAEpB,kBAAC,EAAD,CACEH,QAASA,EACTC,MAAM,QACNC,QAAO,OAAEiB,QAAF,IAAEA,OAAF,EAAEA,EAAMkB,OAAOiB,MACtBnD,WAAU,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAMhB,iBDhC1B,CACE+C,KAAM,iBACNE,UETW,WACb,OACE,6BACE,kBAAC,EAAD,SFQJ,CACEF,KAAM,gBACNE,UGdW,WACb,OAAO,iDCGDI,EAAYC,IAAZD,QACO,SAASE,IACtB,OACE,oCACE,kBAACF,EAAD,CACEnE,UAAU,yBACVe,MAAO,CACLuD,OAAQ,YACRtD,QAAS,GACTuD,UAAW,UAGb,kBAAC,IAAD,KACGX,EAAOhB,KAAI,SAAC4B,EAAYC,GAAb,OACV,kBAAC,IAAD,CACEpE,IAAKoE,EACLZ,KAAMW,EAAMX,KACZC,MAAOU,EAAMV,MACbC,UAAWS,EAAMT,kB,ICjBvBW,EAAkBN,IAAlBM,OAAQC,EAAUP,IAAVO,MAED,SAASC,IAAW,IAAD,EACEhD,oBAAS,GADX,mBACzBiD,EADyB,KACdC,EADc,KAOhC,OACE,oCACE,kBAACH,EAAD,CAAOI,QAAS,KAAMC,aAAW,EAACH,UAAWA,GAC3C,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAQ7E,UAAU,eAChB,kBAAC0E,EAAD,CAAQ1E,UAAU,yBAAyBe,MAAO,CAAEC,QAAS,IAC1DyB,IAAMwC,cACLJ,EAAYK,IAAqBC,IACjC,CACEnF,UAAW,UACXoF,QAfI,WACdN,GAAcD,OAkBV,kBAAC,EAAD,Q,OC1BO,SAASQ,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,OCISC,MARf,WACE,OACE,yBAAKtF,UAAU,OACb,kBAACqF,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.11da25f6.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu } from 'antd';\nimport {\n  UploadOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\nimport './AppMenu.scss';\nimport { Link } from 'react-router-dom';\n\nexport default function AppMenu() {\n  return (\n    <>\n      <div className=\"logo\">COVID-19</div>\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n        <Menu.Item key=\"1\">\n          <Link to=\"/\">\n            <UserOutlined />\n            <span>Dashboard - Polska</span>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"2\">\n          <Link to=\"/secondContent\">\n            <VideoCameraOutlined />\n            <span>Dashboard - Świat</span>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"3\">\n          <Link to=\"/thirdContent\">\n            <UploadOutlined />\n            <span>Mapa polski i świata</span>\n          </Link>\n        </Menu.Item>\n      </Menu>\n    </>\n  );\n}\n","import React from 'react';\nimport { Card, Col } from 'antd';\nimport './CoronaCard.scss';\nimport CountUp from 'react-countup';\n\nexport default function CoronaCard({\n  loading,\n  title,\n  content,\n  lastUpdate,\n}: {\n  loading: boolean;\n  lastUpdate: string;\n  title: string;\n  content: any;\n}) {\n  return (\n    <>\n      <Col style={{ padding: 16 }} span={8}>\n        <Card loading={loading} title={title} bordered={false} hoverable>\n          <h2>\n            <CountUp start={0} end={content} duration={2.0} separator=\",\" />\n          </h2>\n          <div>{new Date(lastUpdate).toDateString()}</div>\n        </Card>\n      </Col>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nfunction useFetch<T>(url: string) {\n  const [data, setData] = useState<T | undefined>(undefined);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function getFetchUrl() {\n      const response = await fetch(url);\n      const json = await response.json();\n\n      setData(json);\n      setLoading(false);\n    }\n\n    getFetchUrl();\n  }, [url]);\n\n  return { data, loading };\n}\n\nexport { useFetch };\n","import React from 'react';\nimport { useFetch } from '../api/useFetch';\nimport { Line } from 'react-chartjs-2';\nimport './Chart.css';\n\ntype CoronaValue = {\n  total: number;\n  value: number;\n  detail: string;\n};\n\ntype CoronaData = [\n  {\n    reportDate: string;\n    confirmed: CoronaValue;\n    recovered: CoronaValue;\n    deaths: CoronaValue;\n  }\n];\nexport default function Chart() {\n  const { data } = useFetch<CoronaData>('https://covid19.mathdro.id/api/daily');\n  const modifiedData = React.useMemo(() => {\n    return (\n      data &&\n      data.length &&\n      data.map((dailyData: any) => ({\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate,\n      }))\n    );\n  }, [data]);\n  console.log(modifiedData);\n\n  const lineChart =\n    modifiedData && modifiedData.length ? (\n      <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData?.map(({ confirmed }) => confirmed),\n              label: 'Potwierdzone',\n              borderColor: '#3333ff',\n              fill: true,\n            },\n            {\n              data: modifiedData?.map(({ deaths }) => deaths),\n              label: 'Zgony',\n              borderColor: 'red',\n              backgroundColor: 'rgba(255,0,0,0.5)',\n              fill: true,\n            },\n          ],\n        }}\n      />\n    ) : null;\n  return (\n    <div>\n      <div>{lineChart}</div>\n    </div>\n  );\n}\n","import FirstContent from './components/FirstContent/FirstContent';\nimport SecondContent from './components/SecondContent/SecondContent';\nimport ThirdContent from './components/ThirdContent/ThirdContent';\n\nexport const routes: any = [\n  {\n    path: '/',\n    exact: true,\n    component: FirstContent,\n  },\n  {\n    path: '/secondContent',\n    component: SecondContent,\n  },\n  {\n    path: '/thirdContent',\n    component: ThirdContent,\n  },\n];\n","import React from 'react';\nimport CoronaCard from '../Card/CoronaCard';\nimport './FirstContent.scss';\nimport { Row } from 'antd';\nimport { useFetch } from '../api/useFetch';\n\ntype CoronaValue = {\n  value: number;\n  detail: string;\n};\n\ntype CoronaDataPL = {\n  lastUpdate: any;\n  confirmed: CoronaValue;\n  recovered: CoronaValue;\n  deaths: CoronaValue;\n};\n\nexport default function FirstContent() {\n  const { data, loading } = useFetch<CoronaDataPL>(\n    'https://covid19.mathdro.id/api/countries/POLAND/'\n  );\n\n  return (\n    <div className=\"site-card-wrapper\">\n      <Row gutter={16}>\n        <CoronaCard\n          loading={loading}\n          title=\"Obecnie zarażonych\"\n          content={data?.confirmed.value}\n          lastUpdate={data?.lastUpdate}\n        />\n        <CoronaCard\n          loading={loading}\n          title=\"Wszystkich wyleczonych\"\n          content={data?.recovered.value}\n          lastUpdate={data?.lastUpdate}\n        />\n        <CoronaCard\n          loading={loading}\n          title=\"Zgony\"\n          content={data?.deaths.value}\n          lastUpdate={data?.lastUpdate}\n        />\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport Chart from '../Chart/Chart';\n\nexport default function SecondContent() {\n  return (\n    <div>\n      <Chart />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function ThirdContent() {\n  return <div>Third Content</div>;\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport './AppContent.scss';\nimport { Route, Switch } from 'react-router-dom';\nimport { routes } from '../../routing';\n\nconst { Content } = Layout;\nexport default function AppContent() {\n  return (\n    <>\n      <Content\n        className=\"site-layout-background\"\n        style={{\n          margin: '24px 16px',\n          padding: 24,\n          minHeight: '100vh',\n        }}\n      >\n        <Switch>\n          {routes.map((route: any, index: number) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.component}\n            />\n          ))}\n        </Switch>\n      </Content>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { Layout } from 'antd';\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons';\nimport './SideNav.scss';\nimport AppMenu from '../AppMenu/AppMenu';\nimport AppContent from '../AppContent/AppContent';\n\nconst { Header, Sider } = Layout;\n\nexport default function SideNav() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  const trigger = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <>\n      <Sider trigger={null} collapsible collapsed={collapsed}>\n        <AppMenu />\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n          {React.createElement(\n            collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\n            {\n              className: 'trigger',\n              onClick: trigger,\n            }\n          )}\n        </Header>\n        <AppContent />\n      </Layout>\n    </>\n  );\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport SideNav from '../components/SideNav/SideNav';\nimport 'antd/dist/antd.css';\n\nexport default function IndexPage() {\n  return (\n    <Layout>\n      <SideNav />\n    </Layout>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport IndexPage from './pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IndexPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}