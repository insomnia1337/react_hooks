{"version":3,"sources":["components/AppMenu/AppMenu.tsx","components/Card/CoronaCard.tsx","components/api/useFetch.tsx","components/BarChart/BarChart.tsx","components/Chart/Chart.tsx","components/ContryPicker/CountryPicker.tsx","routing.tsx","components/FirstContent/FirstContent.tsx","components/SecondContent/SecondContent.tsx","components/ThirdContent/ThirdContent.tsx","components/AppContent/AppContent.tsx","components/SideNav/SideNav.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenu","className","theme","mode","defaultSelectedKeys","Item","key","to","UserOutlined","VideoCameraOutlined","UploadOutlined","CoronaCard","loading","title","content","lastUpdate","style","padding","span","bordered","hoverable","start","end","duration","separator","Date","toLocaleDateString","useFetch","url","country","useState","undefined","data","setData","setLoading","useEffect","changeableUrl","a","fetch","response","json","getFetchUrl","BarChart","confirmed","recovered","deaths","labels","datasets","backgroundColor","options","legend","display","text","Chart","barData","modifiedData","React","useMemo","length","map","dailyData","total","date","reportDate","lineChart","label","borderColor","fill","barChart","value","Option","Select","CountryPicker","onCountryChange","COUNTRIES_DATA","countries","name","rules","required","defaultValue","placeholder","onChange","allowClear","index","routes","path","exact","component","gutter","setCountry","handleCountryChange","Content","Layout","AppContent","margin","minHeight","route","Header","Sider","SideNav","collapsed","setCollapsed","trigger","collapsible","createElement","MenuUnfoldOutlined","MenuFoldOutlined","onClick","IndexPage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53d51658.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu } from 'antd';\nimport {\n  UploadOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\nimport './AppMenu.scss';\nimport { Link } from 'react-router-dom';\n\nexport default function AppMenu() {\n  return (\n    <>\n      <div className=\"logo\">COVID-19</div>\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n        <Menu.Item key=\"1\">\n          <Link to=\"/\">\n            <UserOutlined />\n            <span>Dashboard - Polska</span>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"2\">\n          <Link to=\"/secondContent\">\n            <VideoCameraOutlined />\n            <span>Dashboard - Świat</span>\n          </Link>\n        </Menu.Item>\n\n        <Menu.Item key=\"3\">\n          <Link to=\"/thirdContent\">\n            <UploadOutlined />\n            <span>Mapa polski i świata</span>\n          </Link>\n        </Menu.Item>\n      </Menu>\n    </>\n  );\n}\n","import React from 'react';\nimport { Card, Col } from 'antd';\nimport './CoronaCard.scss';\nimport CountUp from 'react-countup';\n\nexport default function CoronaCard({\n  loading,\n  title,\n  content,\n  lastUpdate,\n}: {\n  loading: boolean;\n  lastUpdate: string;\n  title: string;\n  content: any;\n}) {\n  return (\n    <>\n      <Col style={{ padding: 16 }} span={8}>\n        <Card loading={loading} title={title} bordered={false} hoverable>\n          <h2>\n            <CountUp start={0} end={content} duration={2.0} separator=\",\" />\n          </h2>\n          <div>{new Date(lastUpdate).toLocaleDateString()}</div>\n        </Card>\n      </Col>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nfunction useFetch<T>(url: string, country?: string) {\n  const [data, setData] = useState<T | undefined>(undefined);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let changeableUrl = url;\n    if (country) {\n      changeableUrl = `${url}countries/${country}`;\n    }\n\n    async function getFetchUrl() {\n      const response = await fetch(changeableUrl);\n      const json = await response.json();\n\n      setData(json);\n      setLoading(false);\n    }\n\n    getFetchUrl();\n  }, [url, country, setData, setLoading]);\n\n  return { data, loading };\n}\n\nexport { useFetch };\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nexport default function BarChart({\n  confirmed,\n  recovered,\n  deaths,\n  country,\n}: {\n  confirmed: number | undefined;\n  recovered: number | undefined;\n  deaths: number | undefined;\n  country: string;\n}) {\n  return (\n    <Bar\n      data={{\n        labels: ['Potwierdzone', 'Ozdrowienia', 'Zgony'],\n        datasets: [\n          {\n            labels: 'People',\n            backgroundColor: [\n              'rgba(255,166,3,0.76)',\n              'rgba(3,255,139,1)',\n              'rgba(249,3,83,1)',\n            ],\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Obecny stan w  ${country}` },\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport { useFetch } from '../api/useFetch';\nimport { Line } from 'react-chartjs-2';\nimport './Chart.css';\nimport BarChart from '../BarChart/BarChart';\n\ntype CoronaValue = {\n  total: number;\n  value: number;\n  detail: string;\n};\n\ntype CoronaData = [\n  {\n    reportDate: string;\n    confirmed: CoronaValue;\n    recovered: CoronaValue;\n    deaths: CoronaValue;\n  }\n];\n\nexport default function Chart({\n  barData,\n  country,\n}: {\n  barData: any;\n  country: any;\n}) {\n  const { data } = useFetch<CoronaData>('https://covid19.mathdro.id/api/daily');\n  const modifiedData = React.useMemo(() => {\n    return (\n      data &&\n      data.length &&\n      data.map((dailyData: any) => ({\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate,\n      }))\n    );\n  }, [data]);\n\n  const lineChart =\n    modifiedData && modifiedData.length ? (\n      <Line\n        data={{\n          labels: modifiedData.map(({ date }) => date),\n          datasets: [\n            {\n              data: modifiedData?.map(({ confirmed }) => confirmed),\n              label: 'Potwierdzone',\n              borderColor: '#3333ff',\n              fill: true,\n            },\n            {\n              data: modifiedData?.map(({ deaths }) => deaths),\n              label: 'Zgony',\n              borderColor: 'red',\n              backgroundColor: 'rgba(255,0,0,0.5)',\n              fill: true,\n            },\n          ],\n        }}\n      />\n    ) : null;\n\n  const barChart =\n    barData && barData.confirmed ? (\n      <BarChart\n        confirmed={barData.confirmed.value}\n        recovered={barData.recovered.value}\n        deaths={barData.deaths.value}\n        country={country}\n      />\n    ) : null;\n\n  return (\n    <div>\n      <div>{country ? barChart : lineChart}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Form, Select } from 'antd';\nimport { useFetch } from '../api/useFetch';\nconst { Option } = Select;\n\ntype Countries = {\n  countries: any;\n};\n\nconst CountryPicker = ({ onCountryChange }: { onCountryChange: any }) => {\n  const { data } = useFetch<Countries>(\n    'https://covid19.mathdro.id/api/countries'\n  );\n  const COUNTRIES_DATA = React.useMemo(() => {\n    return data && data.countries.map((country: any) => country.name);\n  }, [data]);\n\n  return (\n    <Form>\n      <Form.Item name=\"country\" label=\"Kraj\" rules={[{ required: false }]}>\n        <Select\n          defaultValue=\"\"\n          placeholder=\"Wybierz Państwo dla którego chcesz zobaczyć dane\"\n          onChange={onCountryChange}\n          allowClear\n        >\n          <Option value=\"\">Global</Option>\n          {COUNTRIES_DATA &&\n            COUNTRIES_DATA.map((country: string, index: number) => (\n              <Option key={index} value={country}>\n                {country}\n              </Option>\n            ))}\n        </Select>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default CountryPicker;\n","import FirstContent from './components/FirstContent/FirstContent';\nimport SecondContent from './components/SecondContent/SecondContent';\nimport ThirdContent from './components/ThirdContent/ThirdContent';\n\nexport const routes: any = [\n  {\n    path: '/',\n    exact: true,\n    component: FirstContent,\n  },\n  {\n    path: '/secondContent',\n    component: SecondContent,\n  },\n  {\n    path: '/thirdContent',\n    component: ThirdContent,\n  },\n];\n","import React from 'react';\nimport CoronaCard from '../Card/CoronaCard';\nimport './FirstContent.scss';\nimport { Row } from 'antd';\nimport { useFetch } from '../api/useFetch';\nimport BarChart from '../BarChart/BarChart';\n\ntype CoronaValue = {\n  value: number;\n  detail: string;\n};\n\ntype CoronaDataPL = {\n  lastUpdate: any;\n  confirmed: CoronaValue;\n  recovered: CoronaValue;\n  deaths: CoronaValue;\n};\n\nexport default function FirstContent() {\n  const { data, loading } = useFetch<CoronaDataPL>(\n    'https://covid19.mathdro.id/api/countries/POLAND/'\n  );\n\n  return (\n    <>\n      <div className=\"site-card-wrapper\">\n        <Row gutter={16}>\n          <CoronaCard\n            loading={loading}\n            title=\"Obecnie zarażonych\"\n            content={data?.confirmed.value}\n            lastUpdate={data?.lastUpdate}\n          />\n          <CoronaCard\n            loading={loading}\n            title=\"Wszystkich wyleczonych\"\n            content={data?.recovered.value}\n            lastUpdate={data?.lastUpdate}\n          />\n          <CoronaCard\n            loading={loading}\n            title=\"Zgony\"\n            content={data?.deaths.value}\n            lastUpdate={data?.lastUpdate}\n          />\n        </Row>\n      </div>\n      <Row gutter={16}>\n        <BarChart\n          confirmed={data?.confirmed.value}\n          recovered={data?.recovered.value}\n          deaths={data?.deaths.value}\n          country={'Polsce'}\n        />\n      </Row>\n    </>\n  );\n}\n","import React from 'react';\nimport Chart from '../Chart/Chart';\nimport CountryPicker from '../ContryPicker/CountryPicker';\nimport { useFetch } from '../api/useFetch';\n\nexport default function SecondContent() {\n  const [country, setCountry] = React.useState('');\n  const { data } = useFetch<any>('https://covid19.mathdro.id/api/', country);\n\n  const handleCountryChange = async (country: string) => {\n    if (country) {\n      await setCountry(country);\n    }\n  };\n\n  return (\n    <div>\n      <CountryPicker onCountryChange={handleCountryChange} />\n      <Chart barData={data} country={country} />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function ThirdContent() {\n  return <div>Third Content</div>;\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport './AppContent.scss';\nimport { Route, Switch } from 'react-router-dom';\nimport { routes } from '../../routing';\n\nconst { Content } = Layout;\nexport default function AppContent() {\n  return (\n    <>\n      <Content\n        className=\"site-layout-background\"\n        style={{\n          margin: '24px 16px',\n          padding: 24,\n          minHeight: '100vh',\n        }}\n      >\n        <Switch>\n          {routes.map((route: any, index: number) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.component}\n            />\n          ))}\n        </Switch>\n      </Content>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { Layout } from 'antd';\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons';\nimport './SideNav.scss';\nimport AppMenu from '../AppMenu/AppMenu';\nimport AppContent from '../AppContent/AppContent';\n\nconst { Header, Sider } = Layout;\n\nexport default function SideNav() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  const trigger = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <>\n      <Sider trigger={null} collapsible collapsed={collapsed}>\n        <AppMenu />\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n          {React.createElement(\n            collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\n            {\n              className: 'trigger',\n              onClick: trigger,\n            }\n          )}\n        </Header>\n        <AppContent />\n      </Layout>\n    </>\n  );\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport SideNav from '../components/SideNav/SideNav';\nimport 'antd/dist/antd.css';\n\nexport default function IndexPage() {\n  return (\n    <Layout>\n      <SideNav />\n    </Layout>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport IndexPage from './pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IndexPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}