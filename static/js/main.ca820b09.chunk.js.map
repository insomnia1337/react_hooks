{"version":3,"sources":["components/AppMenu/AppMenu.tsx","components/Card/CoronaCard.tsx","components/FirstContent/hook.tsx","routing.tsx","components/FirstContent/FirstContent.tsx","components/SecondContent/SecondContent.tsx","components/ThirdContent/ThirdContent.tsx","components/AppContent/AppContent.tsx","components/SideNav/SideNav.tsx","pages/index.tsx","App.js","serviceWorker.js","index.js"],"names":["AppMenu","className","theme","mode","defaultSelectedKeys","Item","key","to","UserOutlined","VideoCameraOutlined","UploadOutlined","CoronaCard","props","style","padding","span","title","bordered","hoverable","content","useFetch","url","useState","undefined","data","setData","loading","setLoading","a","fetch","response","json","useEffect","fetchUrl","routes","path","exact","component","console","log","gutter","confirmed","value","recovered","deaths","Content","Layout","AppContent","margin","minHeight","map","route","index","Header","Sider","SideNav","collapsed","setCollapsed","trigger","collapsible","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","onClick","IndexPage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca820b09.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n  UploadOutlined\r\n} from \"@ant-design/icons\";\r\nimport \"./AppMenu.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function AppMenu() {\r\n  return (\r\n    <>\r\n      <div className=\"logo\">COVID-19</div>\r\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n        <Menu.Item key=\"1\">\r\n          <Link to=\"/\">\r\n            <UserOutlined />\r\n            <span>Dashboard - Polska</span>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"2\">\r\n          <Link to=\"/secondContent\">\r\n            <VideoCameraOutlined />\r\n            <span>Dashboard - Świat</span>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"3\">\r\n          <Link to=\"/thirdContent\">\r\n            <UploadOutlined />\r\n            <span>Mapa polski i świata</span>\r\n          </Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Col } from \"antd\";\r\nimport \"./CoronaCard.scss\"\r\n\r\nexport default function CoronaCard(props: any) {\r\n  return (\r\n    <>\r\n      <Col \r\n      style={{ padding: 16 }}\r\n      span={8}>\r\n        <Card \r\n        title={props.title} \r\n        bordered={false} \r\n        hoverable\r\n        >\r\n          {props.content}\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\ninterface CoronaValue {\r\n    value: number;\r\n    detail: string;\r\n}\r\n\r\ninterface CoronaData {\r\n    confirmed: CoronaValue;\r\n    recovered: CoronaValue;\r\n    deaths: CoronaValue;\r\n}\r\n\r\nfunction useFetch(url: string) {\r\n    const [data, setData] = useState<CoronaData | undefined>(undefined);\r\n    const [loading, setLoading] = useState(true)\r\n   \r\n      async function fetchUrl() {\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n\r\n        setData(json);\r\n        setLoading(false)\r\n      }\r\n\r\n      useEffect(() => {\r\n        fetchUrl();\r\n    }, []);\r\n  \r\n    return {data, loading};\r\n  }\r\n  \r\n  export { useFetch }","\r\nimport FirstContent from \"./components/FirstContent/FirstContent\";\r\nimport SecondContent from \"./components/SecondContent/SecondContent\";\r\nimport ThirdContent from \"./components/ThirdContent/ThirdContent\";\r\n\r\n\r\nexport const routes: any = [\r\n    {\r\n      path: \"/\",\r\n      exact: true,\r\n      component: FirstContent \r\n    },\r\n    {\r\n      path: \"/secondContent\",\r\n      component: SecondContent\r\n    },\r\n    {\r\n      path: \"/thirdContent\",\r\n      component: ThirdContent\r\n    }\r\n  ];","import React from \"react\";\r\nimport CoronaCard from \"../Card/CoronaCard\";\r\nimport \"./FirstContent.scss\";\r\nimport { Row } from 'antd';\r\nimport { useFetch } from \"./hook\";\r\n\r\n\r\n\r\nexport default function FirstContent() {\r\n  const {data, loading} = useFetch('https://covid19.mathdro.id/api/countries/POLAND/')\r\n\r\n  console.log(data)\r\n  if (loading) return <p>Loading...</p>\r\n  return (\r\n    <div className=\"site-card-wrapper\">\r\n     <Row gutter={16}>\r\n     <CoronaCard\r\n        title={\"Obecnie zarażonych\"}\r\n        content={data?.confirmed.value}\r\n        />\r\n           <CoronaCard\r\n        title={\"Wszystkich wyleczonych\"}\r\n        content={data?.recovered.value}\r\n        />\r\n           <CoronaCard\r\n        title={\"Zgony\"}\r\n        content={data?.deaths.value}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SecondContent() {\r\n    return (\r\n        <div>\r\n            Second Content\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ThirdContent() {\r\n    return (\r\n        <div>\r\n           Third Content \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\nimport './AppContent.scss'\r\nimport { routes } from \"../../routing\";\r\nimport {\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\nconst { Content } = Layout;\r\nexport default function AppContent() {\r\n  return (\r\n    <>\r\n      <Content\r\n        className=\"site-layout-background\"\r\n        style={{\r\n          margin: \"24px 16px\",\r\n          padding: 24,\r\n          minHeight: \"100vh\"\r\n        }}\r\n      >\r\n        <Switch>\r\n            {routes.map((route: any, index: number) => (\r\n              <Route\r\n                key={index}\r\n                path={route.path}\r\n                exact={route.exact}\r\n                component={route.component}\r\n              />\r\n            ))}\r\n          </Switch>\r\n      </Content>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Layout } from \"antd\";\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\r\nimport \"./SideNav.scss\";\r\nimport AppMenu from \"../AppMenu/AppMenu\";\r\nimport AppContent from \"../AppContent/AppContent\";\r\n\r\n\r\nconst { Header, Sider } = Layout;\r\n\r\nexport default function SideNav() {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n\r\n  const trigger = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <AppMenu />\r\n        </Sider>\r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n            {React.createElement(\r\n              collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\r\n              {\r\n                className: \"trigger\",\r\n                onClick: trigger\r\n              }\r\n            )}\r\n          </Header>\r\n          <AppContent />\r\n        </Layout>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SideNav from \"../components/SideNav/SideNav\";\r\nimport { Layout } from \"antd\";\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nexport default function IndexPage() {\r\n  return (\r\n      <Layout>\r\n        <SideNav/>\r\n      </Layout>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport IndexPage from './pages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <IndexPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>, \r\ndocument.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}